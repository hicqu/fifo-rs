var searchIndex = {};
searchIndex["fifo"] = {"doc":"A first-in-first-out bytes ring-buffer like kfifo in Linux.","items":[[3,"Sender","fifo","The fifo sender. It's `Send` but `!Send`.",null,null],[3,"Receiver","","The fifo receiver. It's `Send` but `!Send`.",null,null],[5,"align_up_for_fifo_size","","Align the request size up to power of 2. If it's still less then 128 after aligned, then use 128 as return value.",null,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[5,"fifo","","Construct the fifo with capacity as `align_up_for_fifo_size(usize)`, and return the `Sender` and `Receiver` pair connected with that.",null,null],[0,"splice","","Zero-copy interface for `Sender` and `Receiver`, in **splice** style in Linux. When you want to write bytes into the ring-buffer from a `Read`, or read bytes from this into a `Write`, you can use `SpliceRead` and `SpliceWrite`.",null,null],[8,"SpliceRead","fifo::splice","Copy some bytes directly from another `Read` object, without use any temporary buffers.",null,null],[10,"splice_from","","Copy at most *bytes* bytes from a `Read` *r*.",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"}],"output":{"name":"result"}}],[11,"splice_all_from","","Copy all bytes from a `Read` *r*.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SpliceWrite","","Copy some bytes directly into another `Write` object, without use any temporary buffers.",null,null],[10,"splice_to","","Copy at most *bytes* bytes into a `Write` *w*.",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"}],"output":{"name":"result"}}],[11,"splice_all_to","","Copy all bytes to a `Write` *w*.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"splice_from","fifo","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"}],"output":{"name":"result"}}],[11,"splice_to","","",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"}],"output":{"name":"result"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",3,null]],"paths":[[8,"SpliceRead"],[8,"SpliceWrite"],[3,"Sender"],[3,"Receiver"]]};
initSearch(searchIndex);
